# Multi-stage build for production
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy project files
COPY ["IndustrialAutomation.API/IndustrialAutomation.API.csproj", "IndustrialAutomation.API/"]
COPY ["IndustrialAutomation.Core/IndustrialAutomation.Core.csproj", "IndustrialAutomation.Core/"]
COPY ["IndustrialAutomation.Infrastructure/IndustrialAutomation.Infrastructure.csproj", "IndustrialAutomation.Infrastructure/"]

# Restore dependencies
RUN dotnet restore "IndustrialAutomation.API/IndustrialAutomation.API.csproj"

# Copy source code
COPY . .

# Build and publish
WORKDIR "/src/IndustrialAutomation.API"
RUN dotnet publish "IndustrialAutomation.API.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 dotnet && \
    adduser --system --uid 1001 --ingroup dotnet dotnet

# Copy published app
COPY --from=build /app/publish .

# Create logs directory and set permissions
RUN mkdir -p /app/logs && \
    chown -R dotnet:dotnet /app

# Switch to non-root user
USER dotnet

# Set environment variables
ENV ASPNETCORE_ENVIRONMENT=Production
ENV ASPNETCORE_URLS=http://+:80

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

# Start the application
ENTRYPOINT ["dotnet", "IndustrialAutomation.API.dll"]
