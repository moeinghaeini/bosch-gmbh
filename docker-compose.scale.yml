version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: industrial-automation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    networks:
      - industrial-automation-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  # Database Cluster
  sqlserver-primary:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: industrial-automation-sqlserver-primary
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Enterprise
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_primary_data:/var/opt/mssql
      - ./database/backup:/var/opt/mssql/backup
    networks:
      - industrial-automation-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  sqlserver-secondary:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: industrial-automation-sqlserver-secondary
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Enterprise
    ports:
      - "1434:1433"
    volumes:
      - sqlserver_secondary_data:/var/opt/mssql
    networks:
      - industrial-automation-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Backend Services (Scalable)
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: industrial-automation-backend-1
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver-primary;Database=IndustrialAutomationDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - ASPNETCORE_URLS=http://+:80
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - INSTANCE_ID=backend-1
    depends_on:
      - sqlserver-primary
      - redis
    networks:
      - industrial-automation-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: industrial-automation-backend-2
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver-primary;Database=IndustrialAutomationDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - ASPNETCORE_URLS=http://+:80
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - INSTANCE_ID=backend-2
    depends_on:
      - sqlserver-primary
      - redis
    networks:
      - industrial-automation-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend-3:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: industrial-automation-backend-3
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver-primary;Database=IndustrialAutomationDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - ASPNETCORE_URLS=http://+:80
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - INSTANCE_ID=backend-3
    depends_on:
      - sqlserver-primary
      - redis
    networks:
      - industrial-automation-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Services (Scalable)
  frontend-1:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: industrial-automation-frontend-1
    environment:
      - REACT_APP_API_URL=http://nginx/api
      - INSTANCE_ID=frontend-1
    depends_on:
      - nginx
    networks:
      - industrial-automation-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-2:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: industrial-automation-frontend-2
    environment:
      - REACT_APP_API_URL=http://nginx/api
      - INSTANCE_ID=frontend-2
    depends_on:
      - nginx
    networks:
      - industrial-automation-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster
  redis:
    image: redis:7-alpine
    container_name: industrial-automation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - industrial-automation-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: industrial-automation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - industrial-automation-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  grafana:
    image: grafana/grafana:latest
    container_name: industrial-automation-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - industrial-automation-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: industrial-automation-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - industrial-automation-network
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Background Job Processor
  job-processor:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: industrial-automation-job-processor
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver-primary;Database=IndustrialAutomationDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - ASPNETCORE_URLS=http://+:80
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - INSTANCE_ID=job-processor
      - WORKER_MODE=true
    depends_on:
      - sqlserver-primary
      - redis
      - rabbitmq
    networks:
      - industrial-automation-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  sqlserver_primary_data:
  sqlserver_secondary_data:
  redis_data:
  prometheus_data:
  grafana_data:
  rabbitmq_data:

networks:
  industrial-automation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
